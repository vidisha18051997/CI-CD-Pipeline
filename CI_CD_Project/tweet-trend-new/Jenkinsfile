
def registry = 'https://devopsvidishaproject.jfrog.io'
def imageName = 'devopsvidishaproject.jfrog.io/devopsdocker-docker-local/ttrend'
def version   = '2.1.3'

pipeline {
    agent {node{
        label 'maven'
    }
        
    }
environment{
   PATH = "/opt/apache-maven-3.9.5/bin:$PATH"
}
    stages {
        stage("build") {
            steps {
                 echo "----------- build started ----------"
                 sh 'mvn -f tweet-trend-new/pom.xml clean deploy -Dmaven.test.skip=true'
                 echo "----------- build complied ----------"
            }
        }

        stage("test"){
            steps{
                echo "----------- unit test started ----------"
                sh 'mvn -f tweet-trend-new/pom.xml surefire-report:report'
                 echo "----------- unit test Completed ----------"
            }
        }

 stage('SonarQube analysis') {
    environment {
      scannerHome = tool 'devops-sonarqube-scanner'
    }
    steps{
    withSonarQubeEnv('sonarqube-server') { // If you have configured more than one global server connection, you can specify its name
      sh "${scannerHome}/bin/sonar-scanner"      
    }
    }
  }

  stage("Quality Gate"){
    steps {
        script {
        timeout(time: 2, unit: 'MINUTES') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}
    }
  
  }

  stage("Jar Publish") {
    steps {
         script {
           echo '<--------------- Jar Publish Started --------------->'
            def server = Artifactory.newServer url:registry+"/artifactory", credentialsId:"jfrog_cred"
            def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
            def uploadSpec = """{
                 "files": [
                   {
                     "pattern": "jarstaging/(*)",
                     "target": "devops-libs-release-local/{1}",
                     "flat": "false",
                     "props" : "${properties}",
                     "exclusions": [ "*.sha1", "*.md5"]
                   }
                ]
            }"""
            def buildInfo = server.upload(uploadSpec)
            buildInfo.env.collect()
            server.publishBuildInfo(buildInfo)
            echo '<--------------- Jar Publish Ended --------------->'  
   }
}   
}   

   stage(" Docker Build ") {
      steps {
        script {
           echo '<--------------- Docker Build Started --------------->'
           app = docker.build(imageName+":"+version)
           echo '<--------------- Docker Build Ends --------------->'
        }
      }
    }

      stage (" Docker Publish "){
        steps {
            script {
               echo '<--------------- Docker Publish Started --------------->'  
                docker.withRegistry(registry, 'jfrog_cred'){
                    app.push()
                }    
               echo '<--------------- Docker Publish Ended --------------->'  
            }
        }
    }

    stage("Helm Deploy") {
       steps {
         script {
            echo '<--------------- Helm Deploy Started --------------->'
            sh 'helm install ttrend-v1 tweet-trend-new/ttrend-0.1.0.tgz'
            echo '<--------------- Helm deploy Ends --------------->'
         }
       }
    }

  }
    }
